@page "/Cart"
@rendermode InteractiveServer

@using Blazored.LocalStorage
@using Confluent.Kafka
@using Ecom_Client.Helpers
@using Ecom_Client.Models
@using Ecom_Client.Services
@using Ecommerce.Common.Models
@using Ecommerce.Common.Services.Kafka
@using System.Text.Json

@inject ICartService CartService
@inject IProducerService ProducerService
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<h3>Cart</h3>

@if (!CartService.CartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in CartService.CartItems)
            {
                <tr>
                    <td>@item.Product.ProductName</td>
                    <td>
                        <input type="number" min="1" style="width:60px"
                               value="@item.Quantity"
                               @onchange="(e) => OnQuantityChanged(item.Product.ProductId, e)" />
                    </td>
                    <td>@item.TotalPrice:C</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(item.Product.ProductId)">
                            Remove
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Select Payment Type</h3>
    <select @bind="selectedPaymentType" class="form-select mb-3">
        @foreach (var paymentType in Enum.GetValues<PaymentType>())
        {
            <option value="@paymentType">@PaymentTypeExtensions.GetDisplayName(paymentType)</option>
        }
    </select>

    <button class="btn btn-success" @onclick="ProcessOrderAsync">
        Process Order
    </button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger mt-3">@Message</div>
    }
}

@code {
    private PaymentType selectedPaymentType = PaymentType.CashOnDelivery;
    private string Message { get; set; } = string.Empty;

    private void RemoveFromCart(Guid productId)
    {
        CartService.RemoveFromCart(productId);
    }

    private void OnQuantityChanged(Guid productId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newQty) && newQty > 0)
        {
            CartService.UpdateQuantity(productId, newQty);
        }
    }

    private async Task ProcessOrderAsync()
    {
        Message = string.Empty;

        var user = await GetAuthenticatedUserAsync();
        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var cartItems = CartService.CartItems.ToList();
        if (!cartItems.Any())
        {
            Message = "Your cart is empty.";
            return;
        }

        var cart = CartFactory.CreateCartItems(user, cartItems);
        cart.PaymentType = selectedPaymentType;
        var cartMessage = JsonSerializer.Serialize(cart);

        var result = await ProducerService.ProduceAsync("Order.Created", cart.User.UserId.ToString(), cartMessage);
        if (result != null && result.Status == PersistenceStatus.Persisted)
        {
            CartService.Clear();
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = "Failed to create order. Please try again.";
        }
    }

    private async Task<User?> GetAuthenticatedUserAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("jwt");
        if (string.IsNullOrEmpty(token))
            return null;

        var jwt = JwtParser.ParsePayload<JwtUser>(token!);
        if (jwt == null)
            return null;

        return UserFactory.CreateJwtUser(jwt);
    }
}