@page "/Cart"
@using Blazored.LocalStorage
@using Ecom_Client.Helpers
@using Ecom_Client.Models
@using Ecom_Client.Services;
@using Ecommerce.Common.Models
@using Ecommerce.Common.Services.Kafka
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ICartService cartService
@inject IProducerService _producerService;
@rendermode InteractiveServer
@inject ILocalStorageService localStorageService
@inject NavigationManager Navigation

<h3>Cart</h3>

@if (!cartService.CartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartService.CartItems)
            {
                <tr>
                    <td>@item.Product.ProductName</td>
                    <td>
                        <input type="number" min="1" style="width:60px"
                               value="@item.Quantity"
                               @onchange="(e) => OnQuantityChanged(item.Product.ProductId, e)" />
                    </td>
                    <td>@(item.TotalPrice):C</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(item.Product.ProductId)">
                            Remove
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    // Display dropdown for payment methods, remember we hare enum paymentType
    <h3>Select Payment Type</h3>
    <select @bind="selectedPaymentType" class="form-select mb-3">
        @foreach (var paymentType in Enum.GetValues<PaymentType>())
        {
            <option value="@paymentType">@PaymentTypeExtensions.GetDisplayName(paymentType)</option>
        }
    </select>
    <button class="btn btn-success" @onclick="ProcessOrder">
        Process Order
    </button>
}

@code {

    private PaymentType selectedPaymentType = PaymentType.CashOnDelivery; // Default selection

    private void RemoveFromCart(Guid productId)
    {
        cartService.RemoveFromCart(productId);
        StateHasChanged();
    }

    private void OnQuantityChanged(Guid productId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newQty) && newQty > 0)
        {
            cartService.UpdateQuantity(productId, newQty);
            StateHasChanged();
        }
    }

    private async Task ProcessOrder()
    {
        // Validate and parse JWT token
        var user = await GetAuthenticatedUserAsync();

        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Check for cart items
        var cartItems = cartService.CartItems.ToList();
        if (!cartItems.Any())
            return;

        // Create the cart and serialize items
        var cart = CartFactory.CreateCartItems(user, cartItems);
        cart.PaymentType = selectedPaymentType; // Set the selected payment type
        var message = JsonSerializer.Serialize(cart); // Serialize the entire cart, not just items


        // Publish order event
        await _producerService.ProduceAsync("Order-Created", message);

        // Post-processing
        cartService.Clear();
        StateHasChanged();

        Navigation.NavigateTo("/");
    }

    // Helper to get authenticated user from token
    private async Task<User?> GetAuthenticatedUserAsync()
    {
        var token = await localStorageService.GetItemAsync<string>("jwt");
        if (string.IsNullOrEmpty(token))
            return null;

        var jwt = JwtParser.ParsePayload<JwtUser>(token!);
        if (jwt == null)
            return null;

        return UserFactory.CreateJwtUser(jwt);
    }
}
