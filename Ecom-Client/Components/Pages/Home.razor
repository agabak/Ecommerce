@page "/"
@using Ecom_Client.Models.DTOs
@using Ecom_Client.Services.https
@using Ecom_Client.Services;
@using Ecommerce.Common.Models
@inject IProductService productService
@inject ICartService cartService;
@rendermode InteractiveServer

<div class="flex justify-between items-center mb-6">
    <h3 class="text-xl font-semibold">Welcome To Our Store</h3>
    <div class="relative">
        <div class="d-flex align-items-center gap-2">
            <!-- Cart Icon Button -->
            <button type="button" class="btn btn-primary position-relative">
                <i class="bi bi-cart" style="font-size: 1.5rem;"></i>
                @if (CartTotalCount > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @CartTotalCount
                        <span class="visually-hidden">cart items</span>
                    </span>
                }
            </button>

            <!-- View Cart Button (Blazor way) -->
            <NavLink class="btn btn-outline-primary d-flex align-items-center" href="/Cart">
                <i class="bi bi-eye me-2"></i> View Cart
            </NavLink>
        </div>
    </div>
</div>

@if (products == null)
{
    <p>Loading products...</p>
}
else if (!products.Any())
{
    <p>No products available.</p>
}
else
{
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        @foreach (var product in products)
        {
            <div class="border p-4 rounded shadow flex flex-col">
                <img src="@product.Images?.OrderBy(i => i.SortOrder).FirstOrDefault()?.ImageUrl"
                     alt="@product.ProductName"
                     class="w-full h-24 object-cover rounded" />

                <h4 class="text-lg font-bold mt-2">@product.ProductName</h4>
                <p class="text-gray-600">@product.Description</p>
                <p class="text-blue-700 font-semibold mt-1">$@product.Price</p>

                <div class="flex items-center mt-2">
                    <label for="qty-@product.ProductId" class="mr-2 text-sm">Qty:</label>
                    <input id="qty-@product.ProductId"
                           type="number"
                           min="1"
                           class="border rounded w-16 px-2 py-1"
                           @bind="quantities[product.ProductId]"
                           @bind:event="oninput" />
                </div>
                <button class="btn btn-primary"
                        @onclick="() => AddToCart(product)">
                    Add to Cart
                </button>

            </div>
        }
    </div>
}

@code {
    private List<ProductDto> products = [];
    private Dictionary<Guid, int> quantities = new();
    private List<Item> cart = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await productService.GetProductsAsync();
            foreach (var product in products)
            {
                if (!quantities.ContainsKey(product.ProductId))
                    quantities[product.ProductId] = 1; // Default quantity to 1
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
            products = new List<ProductDto>();
        }
    }

    private void AddToCart(ProductDto product)
    {
        if (!quantities.TryGetValue(product.ProductId, out var quantity))
            quantity = 1;

        quantity = Math.Max(1, quantity);

        var cartProduct = new Product
        {
            ProductId = product.ProductId,
            Price = product.Price,
            ProductName = product.ProductName,
        };

        cartService.AddToCart(cartProduct, quantity);
    }

    private int CartTotalCount => cartService.CartItems.Sum(x => x.Quantity);
}
